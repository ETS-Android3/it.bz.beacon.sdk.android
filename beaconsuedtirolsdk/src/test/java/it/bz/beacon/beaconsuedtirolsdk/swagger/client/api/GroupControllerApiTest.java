/*
 * Beacon Suedtirol API
 * The API for the Beacon Suedtirol project for configuring beacons and accessing beacon data.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.bz.beacon.beaconsuedtirolsdk.swagger.client.api;

import it.bz.beacon.beaconsuedtirolsdk.swagger.client.ApiException;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.BaseMessage;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.Group;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupApiKey;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupAssignment;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupUpdate;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupUserRoleUpdate;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserRoleGroup;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserRoleMapping;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupControllerApi
 */
@Ignore
public class GroupControllerApiTest {

    private final GroupControllerApi api = new GroupControllerApi();

    
    /**
     * Assign a user to a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserUsingPATCHTest() throws ApiException {
        GroupAssignment groupAssignment = null;
        Long groupId = null;
        UserRoleGroup response = api.createUserUsingPATCH(groupAssignment, groupId);

        // TODO: test validations
    }
    
    /**
     * Create a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOST1Test() throws ApiException {
        GroupUpdate groupUpdate = null;
        Group response = api.createUsingPOST1(groupUpdate);

        // TODO: test validations
    }
    
    /**
     * Unassign a user from a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingDELETETest() throws ApiException {
        Long groupId = null;
        Long userId = null;
        BaseMessage response = api.deleteUserUsingDELETE(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() throws ApiException {
        Long id = null;
        BaseMessage response = api.deleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * View the assigned api key of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeyUsingGETTest() throws ApiException {
        Long id = null;
        GroupApiKey response = api.getApiKeyUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * View a list of available groups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListUsingGET1Test() throws ApiException {
        List<Group> response = api.getListUsingGET1();

        // TODO: test validations
    }
    
    /**
     * View a list of all assigned user of a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListUsingGETTest() throws ApiException {
        Long groupId = null;
        List<UserRoleMapping> response = api.getUserListUsingGET(groupId);

        // TODO: test validations
    }
    
    /**
     * Search a group with an ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsingGET1Test() throws ApiException {
        Long id = null;
        Group response = api.getUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * Update the role of a user in a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserUsingPATCHTest() throws ApiException {
        Long groupId = null;
        GroupUserRoleUpdate groupUserRoleUpdate = null;
        Long userId = null;
        UserRoleGroup response = api.updateUserUsingPATCH(groupId, groupUserRoleUpdate, userId);

        // TODO: test validations
    }
    
    /**
     * Update a group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPATCH1Test() throws ApiException {
        GroupUpdate groupUpdate = null;
        Long id = null;
        Group response = api.updateUsingPATCH1(groupUpdate, id);

        // TODO: test validations
    }
    
}
