/*
 * Beacon Suedtirol API TEST
 * The API for the Beacon Suedtirol project for configuring beacons and accessing beacon data.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.bz.beacon.beaconsuedtirolsdk.swagger.client.api;

import it.bz.beacon.beaconsuedtirolsdk.swagger.client.ApiException;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.BaseMessage;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.PasswordChange;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.PasswordReset;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.User;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserCreation;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Ignore
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordUsingPATCHTest() throws ApiException {
        Long id = null;
        PasswordChange passwordChange = null;
        BaseMessage response = api.changePasswordUsingPATCH(id, passwordChange);

        // TODO: test validations
    }
    
    /**
     * Create a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOST4Test() throws ApiException {
        UserCreation userCreation = null;
        User response = api.createUsingPOST4(userCreation);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETE1Test() throws ApiException {
        Long id = null;
        BaseMessage response = api.deleteUsingDELETE1(id);

        // TODO: test validations
    }
    
    /**
     * View a list of available users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListUsingGET6Test() throws ApiException {
        List<User> response = api.getListUsingGET6();

        // TODO: test validations
    }
    
    /**
     * Search a user with an ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsingGET4Test() throws ApiException {
        Long id = null;
        User response = api.getUsingGET4(id);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordUsingPATCHTest() throws ApiException {
        Long id = null;
        PasswordReset passwordReset = null;
        BaseMessage response = api.resetPasswordUsingPATCH(id, passwordReset);

        // TODO: test validations
    }
    
    /**
     * Update a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPATCH2Test() throws ApiException {
        Long id = null;
        UserUpdate userUpdate = null;
        User response = api.updateUsingPATCH2(id, userUpdate);

        // TODO: test validations
    }
    
}
